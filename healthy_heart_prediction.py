# -*- coding: utf-8 -*-
"""Healthy_Heart_Prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Q2E4ZOWiSmNk6BlEbNPnyypLKnlUUaY7

Importing Dependencies
"""

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

"""Data collection and Processing

"""

#loading csv data to pandas data fram
data_heart = pd.read_csv('/content/heart.csv')

#number of rows and columns in dataset
data_heart.shape

#getting a little info abt the data 
data_heart.info()

#checking for missing values
data_heart.isnull().sum()

#statistical measures abt the data
data_heart.describe()

#checking the distribution of target value
data_heart['target'].value_counts()

"""1=> have a defect in their heart


0=> no defect in heart

Splitting the features and target
"""

A = data_heart.drop(columns='target', axis=1)
 B = data_heart['target']

print(A)

print(B)

"""Splitting data into training and test data

"""

A_train, A_test, B_train, B_test= train_test_split(A, B, test_size= 0.2, stratify=B, random_state=2)

print(A.shape, A_train.shape, A_test.shape)

"""Model Training

Logistic Regression
"""

model= LogisticRegression()

#training the LogisticRegression model with training data
model.fit(A_train, B_train)

"""Model Evaluation

Accuracy Score
"""

#accuracy on training data
A_train_prediction = model.predict(A_train)
training_data_accuracy = accuracy_score(A_train_prediction, B_train)

print('Accuracy on training data: ', training_data_accuracy)

#accuracy on test data
A_test_prediction = model.predict(A_test)
test_data_accuracy = accuracy_score(A_test_prediction, B_test)

print('Accuracy on test data: ', test_data_accuracy)

"""Building a predictive Model

"""

input_data=(60,0,0,150,258,0,0,157,0,2.6,1,2,3)

#changing input data to numpy array
input_data_numpy_array_form= np.asarray(input_data)

#reshaping numpy array since we nwant to predict for only set of values
input_data_reshaped = input_data_numpy_array_form.reshape(1, -1)

prediction = model.predict(input_data_reshaped)
print(prediction)

if(prediction[0] == 0):
  print('The heart does not have any heart defect')
else:
  print('The heart has a defect')

input_data=(63,1,3,145,233,1,0,150,0,2.3,0,0,1)

#changing input data to numpy array
input_data_numpy_array_form= np.asarray(input_data)

#reshaping numpy array since we nwant to predict for only set of values
input_data_reshaped = input_data_numpy_array_form.reshape(1, -1)

prediction = model.predict(input_data_reshaped)
print(prediction)

if(prediction[0] == 0):
  print('The heart does not have any heart defect')
else:
  print('The heart has a defect')